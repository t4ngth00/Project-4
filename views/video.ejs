<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <title>FreeToCall</title>
  	<!--Import Google Icon Font-->
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
  	<!--Import materialize.css-->
  	<link href="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.8/css/materialize.css" type="text/css" rel="stylesheet" media="screen,projection"/>
    <!--Import jQuery before materialize.js-->
    <script type="text/javascript" src="https://code.jquery.com/jquery-2.1.1.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.8/js/materialize.js"></script>
    <!--Let browser know website is optimized for mobile-->
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <!--Import peerjs -->
    <script src="http://cdn.peerjs.com/0.3/peer.js"></script>
    <script src="/socket.io/socket.io.js"></script>
  	<!-- Import custom css and js -->
  	<link href="css/style.css" rel="stylesheet">
    
  </head>
  <body>
      <!-- calling UI -->
      <div id="callingUI" class="modal blue-grey darken-4">
        <div class="modal-content">
          <h3 class="center-align white-text">Your connection to </br><span class="green-text" id="calling_peer_id"></span> is ready</h3>
          <h3 class="center-align white-text">You can talk now :)</h3>
        </div>
        <div class="progress grey lighten-3">
          <div class="indeterminate light-green"></div>
        </div>
        <div class="modal-footer blue-grey darken-3">
          <a href="#" class="modal-action modal-close waves-effect btn light-green">Close</a>
        </div>
      </div>

      <!-- Accept, decline call UI -->
      <div id="answeringUI" class="modal blue-grey darken-4">
        <div class="modal-content">
          <h3 class="center-align white-text">Incoming call from</br><span class="green-text" id="connected_peer_answering"></span></h3>
        </div>
        <div class="progress grey lighten-3">
          <div class="indeterminate light-green"></div>
        </div>
        <div class="modal-footer blue-grey darken-3">
          <a href="#" id="accept" class="modal-action modal-close waves-effect btn light-green">Close</a>
        </div>
      </div>

      <!-- navigation bar -->
      <ul id="dropdown-user" class="dropdown-content">
        <li><a href="/profile">Profile</a></li>
        <li class="divider"></li>
        <li><a href="/logout">Logout</a></li>
      </ul>
      <nav>
        <div class="nav-wrapper blue-grey darken-3 ">
          <a href="" class="brand-logo ">FreeToCall</a>
          <ul class="right hide-on-med-and-down">

            <li><a class="dropdown-button" href="/profile" data-activates="dropdown-user">
                <i class="material-icons left light-green-text lighten-1">perm_identity</i>
                <span class="bold light-green-text lighten-1 "> <%=user.local.email %> </span></a>
            </li>
          </ul>
        </div>
      </nav>
      <div class="row">
        <!-- Display the video of the remote peer -->
        <div class="col s5">
            <div class="card white-text">
              <div class="hide" id="remoteVideo">
                <video class="responsive-video" controls autoplay></video>
              </div>
            </div>
        </div>
        <!-- Display something -->
        <div class="col s4">
          <div class="card blue-grey darken-3">
            <div class="card-content light-green-text">
                <h4 class="center-align "><b>Notice!</b></h4>
                <h5 class="white-text center-align">Please click "allow" to load unsafe scripts after login to our application
                </h5>
            </div>
          </div>
        </div>
        <!-- Display main part of the application -->
        <div class="col s3">
          <div class="card blue-grey darken-3">
            <div class="card-content white-text">
                  <h5  class="light-green-text lighten-1"><a class="white-text">Your username: </a><b><span id="id"></span></b></h5>

                  <div class="input-field" id="friend-input-field">
                    <input id="peer_id" type="text" class="validate">
                    <label for="last_name">Friend's Name</label>
                  </div>
                  <div id="connected_peer_container" class="hide">
                    Connected to :
                    <span class="light-green-text lighten-1" id="connected_peer"></span>
                  </div>
                  
                </br>
                <div class="card-image">
                  <a id="callButton" class="btn-floating btn-large waves-effect waves-light light-green darken-1">
                    <i class="material-icons">phone</i>
                  </a>
                  <a id="endcall" class="btn-floating btn-large waves-effect waves-light red darken-1 hide">
                    <i class="material-icons">call_end</i>
                  </a>
                </div>
                 <button id="startButton">See your face</button>
            </div>
          </div>
          <!-- Display video of the current user -->
          <div>
            <div class="card-content white-text">
              <div>
                <video id="localVideo" class="responsive-video" controls autoplay></video>
              </div>
            </div>
          </div>

        </div>

      </div>
      <script>
      $(function(){
      var socket = io();
      var myid = '<%=user.id %>';

      console.log(myid);  
      //send through login
      socket.emit('login', {'id': myid});
      

      var callDuration;
      var localVideo = document.getElementById('localVideo');
      var remoteVideo = document.getElementById('remoteVideo');

      var callButton = document.getElementById("callButton");
      var startButton = document.getElementById("startButton");
      startButton.onclick = start;
      callButton.disable = true;
      callButton.onclick = call;

      var pc1, pc2, localStream;
      var offerOptions = {
        offerToReceiveAudio: 1,
        offerToReceiveVideo: 1
      }

      function getOtherPc(pc) {
        return (pc === pc1) ? pc2 : pc1;
      }

      function gotStream(stream){
        localVideo.srcObject = stream;
        localStream = stream;
        callButton.disable = false;
      }

      function start(){
        navigator.mediaDevices.getUserMedia({
          audio: true,
          video: true
        }).then(gotStream)
          .catch(e => alert("Not supported: " + e));
      }

      function call(){
        callButton.disable = true;
        var videoTracks = localStream.getVideoTracks();
        var audioTracks = localStream.getAudioTracks();

      //setup the server there
        var servers = {
          iceServers: [
              {urls: "stun:23.21.150.121"},
              {urls: "stun:stun.l.google.com:19302"},
              {urls: "turn:numb.viagenie.ca", credential: "webrtcdemo", username: "louis%40mozilla.com"}
          ]
        }
      
        pc1 = new webkitRTCPeerConnection(servers);
        pc1.onicecandidate = e => onIceCandidate(pc1, e);
        pc2 = new webkitRTCPeerConnection(servers);
        pc2.onicecandidate = e => onIceCandidate(pc2, e);

        //set pc2 stream = remoteStream
        pc2.addStream = gotRemoteStream;
        pc1.addStream(localStream);

        var peer_id = document.getElementById('peer_id').value;
        socket.emit('sendData',{
          'id' : myid,
          'peer_id' : peer_id,          
          'type' : 'calling'
        });

        pc1.createOffer(offerOptions)
          .then(onCreateOfferSuccess)
      }

      //callback
      function onCreateOfferSuccess(desc) {
        // console.log(desc.sdp);
        pc1.setLocalDescription(desc);
        pc2.setRemoteDescription(desc)
          .then(onSetRemoteSuccess);
        //now start createAnswre
        pc2.createAnswer()
          .then(onCreateAnswerSuccess)
          .catch(e => alert(e))
      }
      function gotRemoteStream(e){
        window.remoteStream = remoteVideo.srcObject = e.stream;
      }

      function onSetRemoteSuccess(){

      }

      function onCreateAnswerSuccess(desc) {
        pc2.setLocalDescription(desc);
        pc1.setRemoteDescription(desc);
      }
      function onIceCandidate(pc, event){
         if(event.candidate){
            getOtherPc(pc).addIceCandidate(new RTCIceCandidate(event.candidate))
         }
      }
      function onReceive(message){
        if(message.type === 'calling'){
          console.log('ok');
          $('#answeringUI').modal('open');
          $('#remoteVideo').removeClass('hide');
          
        }
      }
      socket.on('dataReceived', onReceive);
      });
       $('.modal').modal({
            dismissible: true, // Modal can be dismissed by clicking outside of the modal
            opacity: .8, // Opacity of modal background
            in_duration: 300, // Transition in duration
            out_duration: 200, // Transition out duration
            starting_top: '20%', // Starting top style attribute
            ending_top: '30%'
          }
        );
    </script>
  </body>
</html>
