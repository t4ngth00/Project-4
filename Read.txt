1 Note that getUserMedia() must be used on a server,
not the local file system, otherwise a PERMISSION_DENIED: 1 error will be thrown

2 Constraints have been implemented since Chrome, Firefox and Opera. These can be used to set
values for video resolution for getUserMedia() and RTCPeerConnection addStream() calls. 

3 The intention is to implement support for other constraints such as aspect ratio, facing mode (front or back camera),
frame rate, height and width, along with an ***applyConstraints()*** method.

**DANGER: getUserMedia constraints set in one browser tab affect constraints for all tabs opened subsequently

4 Chrome apps also make it possible to share a live 'video' of a single browser tab or the entire desktop via chrome.tabCapture and chrome.desktopCapture APIs. A desktop capture sample extension can be found in the WebRTC samples GitHub repository.
For screencast, code and more information, see the HTML5 Rocks update: Screensharing with WebRTC.
USAGE: https://developers.google.com/web/updates/2012/12/Screensharing-with-WebRTC

5. WebRTC uses RTCPeerConnection to communicate streaming data between browsers (aka peers),
but also needs a mechanism to coordinate communication and to send control messages, a process known as signaling. 
Signaling methods and protocols are not specified by WebRTC: signaling is not part of the RTCPeerConnection API.

Signaling is used to exchange three types of information:

Session control messages: to initialize or close communication and report errors.
Network configuration: to the outside world, what's my computer's IP address and port?
Media capabilities: what codecs and resolutions can be handled by my browser and the browser it wants to communicate with?

EXAMPLE :https://www.html5rocks.com/en/tutorials/webrtc/basics/#toc-signaling
very clear EXAMPLE
NOTE: signalingChannel.send(JSON.stringify({ "candidate": evt.candidate }));
is a way of sending, we can send using websocket or socketio
**READ MORE ABOUT SDP to understand MORE CLEARLY (SDP is just session description protocol,
sending some info like codec or network)

THEN JUST FOLLOW THE WORKFLOW, CREATE 2 PC as 2 PEERS, to gotDescription or setRemoteDes + createAnswer