<!DOCTYPE html>
<html ng-app="Chatapp">
<head>
  <meta charset="UTF-8">
  <title>Main page</title>
  <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=yes">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.8/css/materialize.css" type="text/css" rel="stylesheet" media="screen,projection"/>
  <link href="css/style.css" rel="stylesheet">
   <!--Import materialize.css-->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.8/css/materialize.css" type="text/css" rel="stylesheet" media="screen,projection"/>
    <!--Import jQuery before materialize.js-->
    <script type="text/javascript" src="https://code.jquery.com/jquery-2.1.1.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.8/js/materialize.js"></script>

  <!-- semantic UI -->
  <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.2.6/semantic.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.1/jquery.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.2.6/semantic.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.8/js/materialize.js"></script>
  <!-- angular  -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.6.0-rc.2/angular.js"></script>
  <script src="http://cdn.peerjs.com/0.3/peer.js"></script>
</head>

<body ng-controller="ChatCtrl">
  <!-- navigation bar -->
  <div class="ui top attached icon menu">
    <div class="header item">
      Our Company
    </div>
    <div class="ui dropdown right icon item ">
      <i class="icon setting large teal "></i>
      <div class="menu">
        <div class="item">
          <a href="/profile" >Profile</a>
        </div>
        <div class="divider"></div>
        <div class="item">
          <a href="/logout" >Log out</a>
        </div>
      </div>
    </div>
  </div>
  <!-- calling UI -->
      <div id="callingUI" class="modal blue-grey darken-4">
        <div class="modal-content">
          <h3 class="center-align white-text">Your connection to </br><span class="green-text" id="calling_peer_id"></span> is ready</h3>
          <h3 class="center-align white-text">You can talk now :)</h3>
        </div>
        <div class="progress grey lighten-3">
          <div class="indeterminate light-green"></div>
        </div>
        <div class="modal-footer blue-grey darken-3">
          <a href="#" class="modal-action modal-close waves-effect btn light-green">Close</a>
        </div>
      </div>

      <!-- Accept, decline call UI -->
      <div id="answeringUI" class="modal blue-grey darken-4">
        <div class="modal-content">
          <h3 class="center-align white-text">Incoming call from</br><span class="green-text" id="connected_peer_answering"></span></h3>
        </div>
        <div class="progress grey lighten-3">
          <div class="indeterminate light-green"></div>
        </div>
        <div class="modal-footer blue-grey darken-3">
          <a href="#" id="accept" class="modal-action modal-close waves-effect btn light-green">Accept</a>
          <a href="#" id="decline" class="modal-action modal-close waves-effect btn light-green">Close</a>
        </div>
      </div>

  <!-- grid view -->
  <div class="ui attached grid ">

    <div class="eleven wide column">
      <div class="ui top icon menu">
        <div class="right menu">
          <a class="item"><i class="icon record large teal "></i></a>
          <a class="item"><i class="icon call large teal "></i></a>
        </div>
      </div>
      <div class="hide" id="peer-camera">
        <video class="my-video" controls autoplay></video>
      </div>
    </div>

    <div class="five wide column">
      <!-- some part -->
      <div class="ui teal inverted two top attached item menu large">
        <a class="item " data-tab="first">Friend</a>
        <a class="item active" data-tab="second">Online User</a>
      </div>

      <div class="ui bottom attached tab segment " data-tab="first">
        <div class="ui very relaxed large list selection ">
          <div class="item">
            <div class="right floated content">
              <div class="ui button">Add</div>
            </div>
            <img class="ui avatar image" src="">
            <div class="content">
              <a class="header">Rachel</a>
            </div>
          </div>
        </div>
      </div>

      <div class="ui bottom attached tab segment active" data-tab="second">
        <div class="ui very relaxed large list selection" id = "OnlineUsers" ng-repeat="user in OnlineUser">
          <div class="item">
            <div class="right floated content">
              <div class="ui button card-image" >
              <a id="call" ng-click="call(user)" class="btn-floating btn-large waves-effect waves-light light-green darken-1">
                  <i class="material-icons">call/i>
              </a>
              <a id="endcall" ng-click="endCall()" class="btn-floating btn-large waves-effect waves-light red darken-1 hide">
              <i class="material-icons">End</i>
              </a>
              </div>
            </div>
            <img class="ui avatar image" src="">
            <div class="content">
              <a class="header">{{user}}</a>
            </div>
          </div>
        </div>
      </div>

    <div class="four wide column">
      <div id="my-camera">
        <video class="my-video" controls autoplay></video>
      </div>
    </div>

    </div>
  </div>
  <script src="/socket.io/socket.io.js"></script>
  <script>
   
    $('.menu .item').tab();
    $('.ui.dropdown').dropdown();

    var your_id = '<%=user.local.email %>'; console.log(your_id);
    var socket = io();
    var peer_id, conn;

    socket.emit('user_send_status_online', your_id);
    var Chatapp = angular.module("Chatapp", []);

      Chatapp.factory('socket', function ($rootScope) {
        var socket = io.connect();
       
        return {
          on: function (eventName, callback) {
            socket.on(eventName, function () {
              var args = arguments;
              $rootScope.$apply(function () {
                callback.apply(socket, args);
              });
            });
          },
          emit: function (eventName, data, callback) {
            socket.emit(eventName, data, function () {
              var args = arguments;
              $rootScope.$apply(function () {
                if (callback) {
                  callback.apply(socket, args);
                }
              });
            })
          }
        };
      });

      Chatapp.controller("ChatCtrl", function ($scope, $rootScope, socket) {
        $scope.OnlineUser = [];
        socket.on('server_send_online_user', function(data){
            $scope.OnlineUser = data.onlineUsers;
        });
            var peer = new Peer( your_id, {
            key: '78flukfdfbcvj9k9',
            debug: 3,
            config: {'iceServers': [
            { url: 'stun:stun1.l.google.com:19302' },
            { url: 'turn:numb.viagenie.ca',
              credential: 'muazkh', username: 'webrtc@live.com' }
            ]}
          });
        socket.emit('login',{'id': your_id});   
        // generate the id of current user
        peer.on('open', function(){
          $('#id').text(peer.id);
          console.log(peer.socket.disconnected);
        });
        // get video configuration
        navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
        function getVideo(callback){
          navigator.getUserMedia({audio: true, video: true}, callback, function(error){
            console.log(error);
            alert('An error occured when taking video and audio. Please try again');
          });
        }
        // get video of current user
        getVideo(function(stream){
          window.localStream = stream;
          onReceiveStream(stream, 'my-camera');
        });
        function onReceiveStream(stream, element_id){
          var video = $('#' + element_id + ' video')[0];
          video.src = window.URL.createObjectURL(stream);
          window.peer_stream = stream;
        }
      // ***End get video stream, now implement call function***
         $scope.call = function(user){
          peer_id = user;
            if(peer_id){
              conn = peer.connect(peer_id, {metadata: {'username': your_id} });
            }
          // Call a friend, providing our mediaStream
            var call = peer.call(peer_id, window.localStream);
            call.on('stream', function(stream){
              $('#calling_peer_id').text(peer_id);
              $('#callingUI').modal('open');
              socket.emit('sendData',{
                'id': your_id,
                'peer_id': peer_id,
                'type': 'calling'
              });
              
              $('#call').addClass('hide');
              $('#endcall').removeClass('hide');
              $('#peer-camera').removeClass('hide');

            });
        }
      // start the connection for both
        peer.on('connection', function(connection){
          conn = connection;
          peer_id = connection.peer;
          $('#peer_id').addClass('hide').val(peer_id);
          $('#connected_peer_container').removeClass('hide');
          $('#friend-input-field').addClass('hide');
          // data for imcoming call
          $('#connected_peer').text(connection.metadata.username);
          $('#connected_peer_answering').text(connection.metadata.username);
          $('#call').addClass('hide');;
          $('#endcall').removeClass('hide');
          $('#peer-camera').removeClass('hide');
          $('#my-camera').removeClass('hide');
        });
          
      // answer the incoming call
        peer.on('call', function(call){
          //cannot move call answer to click event ->deo accpet dc call dkm ggff
          call.answer(window.localStream);
          call.on('stream', function(stream){
            window.peer_stream = stream;
            onReceiveStream(stream, 'peer-camera');
            });        
          $('#accept').click(function(){
            console.log('accept call');
            socket.emit('sendData',{'id': your_id, 'peer_id': peer_id, 'type': 'answering'});
          })
          $('#decline').click(function(){
            console.log('decline call');
            socket.emit('sendData',{'id': your_id, 'peer_id': peer_id, 'type': 'decline'});
            window.location.reload();
          });
        });
      // run received function
        function onReceiveCall(call){ 
          call.answer(window.localStream);
          call.on('stream', function(stream){
            window.peer_stream = stream;
            onReceiveStream(stream, 'peer-camera');
            });        
        }
        
        //now implement endCall function. close the peer connection
       $scope.endCall = function(){
          socket.emit('sendData',{'id': your_id, 'peer_id': peer_id, 'type': 'end'});
           peer.destroy();
           peer = null;
           // $('#endcall').addClass('hide');
           // $('#call').removeClass('hide');
           window.location.reload();
       }
        
        peer.on('close', function() {
          console.log(peer.socket.disconnected);
        });

        function onReceiveMessage(data){
         switch(data.type){
          case 'calling':
          $('#answeringUI').modal('open');
            console.log('work');
          break;
          case 'answering':
            console.log(peer);
            $('#call').addClass('hide');
            $('#endcall').removeClass('hide');
          break;
          case 'decline':
            peer.destroy();
            peer = null;
            alert("Declined");
            $('#endcall').addClass('hide');
            $('#call').removeClass('hide');
            $('#peer-camera').addClass('hide');
          case 'end':
            console.log('gg end');
            $('#endcall').addClass('hide');
            $('#call').removeClass('hide');
            $('#peer-camera').addClass('hide');
            break;
         }
        }
        
       socket.on('dataReceived', onReceiveMessage);
      
      // modal configuration
        $('.modal').modal({
            dismissible: true, // Modal can be dismissed by clicking outside of the modal
            opacity: .8, // Opacity of modal background
            in_duration: 300, // Transition in duration
            out_duration: 200, // Transition out duration
            starting_top: '20%', // Starting top style attribute
            ending_top: '30%'
          }
        );
       
      });
  </script>
</body>
</html>
